import tensorflow as tf


def discriminator_loss(real, generated):
    '''
    Computes the discriminator loss using binary cross-entropy. 
    Real images are compared against generated ones, with label smoothing applied to real images.

    Parameters:
        real (tensor): Real images.
        generated (tensor): Generated images.

    Returns:
        tensor: Total loss for the discriminator.
    '''
    real_loss = tf.keras.losses.BinaryCrossentropy(from_logits=True, label_smoothing=0.1)(tf.ones_like(real), real)
    generated_loss = tf.keras.losses.BinaryCrossentropy(from_logits=True, label_smoothing=0.1)(tf.zeros_like(generated), generated)
    return real_loss + generated_loss

def generator_loss(generated):
    '''
    Computes the generator loss using binary cross-entropy. 
    Generated images are compared against real images.

    Parameters:
        generated (tensor): Generated images.

    Returns:
        tensor: Loss for the generator.
    '''
    return tf.keras.losses.BinaryCrossentropy(from_logits=True)(tf.ones_like(generated), generated)

def cycle_consistency_loss(real_image, cycled_image):
    '''
    Computes the cycle consistency loss as the mean absolute error between real images and cycled images.
    This ensures that the image generated by the generator can be cycled back to the original image.

    Parameters:
        real_image (tensor): Original images.
        cycled_image (tensor): Cycled images.

    Returns:
        tensor: Cycle consistency loss.
    '''
    return tf.reduce_mean(tf.abs(real_image - cycled_image))

def identity_loss(real_image, same_image):
    '''
    Computes the identity loss as the mean absolute error between real images and images that should be 
    identical to them. This encourages the generator to preserve the identity of the image.

    Parameters:
        real_image (tensor): Original images.
        same_image (tensor): Images that should be identical to the original images.

    Returns:
        tensor: Identity loss.
    '''
    return tf.reduce_mean(tf.abs(real_image - same_image))